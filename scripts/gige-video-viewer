from enum import Enum
import signal
import sys
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.uic import loadUi

from video_sender.gige_camera import gige_camera_qobject

        
class MainWindow(QtWidgets.QMainWindow):
    
    def enableSoftwareTrigger(self, value):
        print("toggle radio for sw:", value)
        self.swTogglePushButton.setEnabled(value)

    def softwareTrigger(self, *args):
        print("software trigger", args)
        print(self.g.cameraSoftTrigger())

    def triggerButtonGroupClicked(self, button):
        print("trigger button group clicked")
        if button == self.swToggleRadioButton:
            self.g.TriggerMode = 1
        elif button == self.hwToggleRadioButton:
            self.g.TriggerMode = 2
        elif button == self.continuousRadioButton:
            self.g.TriggerMode = 0
        else:
            print("uknown button")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        loadUi("gige_video_viewer.ui", self)


        self.g = gige_camera_qobject.GigECamera()
        self.g.imageChanged.connect(self.camera_callback)

        self.buttonGroup.buttonClicked.connect(self.triggerButtonGroupClicked)
        self.swToggleRadioButton.toggled.connect(self.enableSoftwareTrigger)
        self.swTogglePushButton.pressed.connect(self.softwareTrigger)
        self.hwToggleRadioButton.toggled.connect(lambda value: self.groupBox_2.setEnabled(value))
        self.radioButton_23.toggled.connect(self.enableAuto)

        self.checkBox_2.stateChanged.connect(self.VMirrorChanged)
        self.checkBox_3.stateChanged.connect(self.HMirrorChanged)

        self.g.begin()

        #TODO(dek): better way to keep UI and properties in sync?

        self.g.AeTargetChanged.connect(lambda value: self.AeTargetSlider.setValue(value))
        self.AeTargetSlider.valueChanged.connect(self.AeTargetChanged)
        self.AeTargetLabel.setText(str(self.g.AeTarget))
        self.AeTargetSlider.setMinimum(self.g.cap.sExposeDesc.uiTargetMin)
        self.AeTargetSlider.setMaximum(self.g.cap.sExposeDesc.uiTargetMax)

        self.g.ExposureTimeChanged.connect(lambda value: self.exposureTimeSlider.setValue(value))
        self.exposureTimeSlider.valueChanged.connect(self.ExposureTimeChanged)
        self.exposureTimeLabel.setText(str(self.g.ExposureTime))
        self.exposureTimeSlider.setMinimum(self.g.cap.sExposeDesc.uiExposeTimeMin)
        self.exposureTimeSlider.setMaximum(self.g.cap.sExposeDesc.uiExposeTimeMax)

        self.g.AnalogGainChanged.connect(lambda value: self.analogGainSlider.setValue(value))
        self.analogGainSlider.valueChanged.connect(self.AnalogGainChanged)
        self.analogGainLabel.setText(str(self.g.AnalogGain))
        self.analogGainSlider.setMinimum(self.g.cap.sExposeDesc.uiAnalogGainMin)
        self.analogGainSlider.setMaximum(self.g.cap.sExposeDesc.uiAnalogGainMax)
    
        self.g.GammaChanged.connect(lambda value: self.GammaSlider.setValue(value))
        self.gammaSlider.valueChanged.connect(self.GammaChanged)
        self.gammaLabel.setText(str(self.g.Gamma))
        self.gammaSlider.setMinimum(self.g.cap.sGammaRange.iMin)
        self.gammaSlider.setMaximum(self.g.cap.sGammaRange.iMax)

        self.g.ContrastChanged.connect(lambda value: self.ContrastSlider.setValue(value))
        self.contrastSlider.valueChanged.connect(self.ContrastChanged)
        self.contrastLabel.setText(str(self.g.Contrast))
        self.contrastSlider.setMinimum(self.g.cap.sContrastRange.iMin)
        self.contrastSlider.setMaximum(self.g.cap.sContrastRange.iMax)

        self.g.SharpnessChanged.connect(lambda value: self.SharpnessSlider.setValue(value))
        self.sharpnessSlider.valueChanged.connect(self.SharpnessChanged)
        self.sharpnessLabel.setText(str(self.g.Sharpness))
        self.sharpnessSlider.setMinimum(self.g.cap.sSharpnessRange.iMin)
        self.sharpnessSlider.setMaximum(self.g.cap.sSharpnessRange.iMax)


        self.g.camera_play()


    def GammaChanged(self, gamma):
        self.g.Gamma = gamma

    def ContrastChanged(self, contrast):
        self.g.Contrast = contrast

    def SharpnessChanged(self, sharpness):
        self.g.Sharpness = sharpness

    def AnalogGainChanged(self, analog_gain):
        self.g.AnalogGain = analog_gain

    def HMirrorChanged(self, value):
        hmirror = value == QtCore.Qt.Checked
        self.g.HMirror = hmirror
    
    def VMirrorChanged(self, value):
        vmirror = value == QtCore.Qt.Checked
        self.g.VMirror = vmirror

    def enableAuto(self, value):
        self.groupBox_6.setEnabled(value)
        self.groupBox_5.setEnabled(not value)
        self.g.AeState = not value

    def AeTargetChanged(self, target):
        self.g.AeTarget = target

    def ExposureTimeChanged(self, exposure):
        print("ExposureTimeChanged: ", exposure)
        self.g.ExposureTime = exposure

    def camera_callback(self, draw_data):
        image = QtGui.QImage(draw_data, draw_data.shape[1], draw_data.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(image.scaled(1920/2,1080/2))
        self.label.setPixmap(pixmap)


class QApplication(QtWidgets.QApplication):
    def __init__(self, *args, **kwargs):
        super(QApplication, self).__init__(*args, **kwargs)

        self.main_window = MainWindow()
        self.main_window.show()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    app.exec_()

