from enum import Enum
import PySpin
import signal
import sys
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.uic import loadUi
from microscope_esp32_controller_serial import serial_interface_qobject as microscope_serial_qobject

# from video_sender.spin_widget import SpinWidget
# from video_sender.pyspin_camera import PySpinCamera
from video_sender.gige_camera import gige_camera_qobject



class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        loadUi("video_viewer.ui", self)
        
        self.g = gige_camera_qobject.GigECamera()
        self.g.imageChanged.connect(self.camera_callback)
        self.g.begin()


        self.microscope_esp32_controller_serial = microscope_serial_qobject.SerialInterface('/dev/ttyUSB1')
        self.microscope_esp32_controller_serial.reset()
        self.microscope_esp32_controller_serial.messageChanged.connect(self.onMessage2Changed)
    
        self.lineEdit.editingFinished.connect(self.editingFinished)

        self.doubleSpinBox.valueChanged.connect(self.exposureChanged)

    def exposureChanged(self, exposure):
        self.g.ExposureTime = exposure
        
    def editingFinished(self):
        line = self.lineEdit.text

        print("line:", line())
        self.microscope_esp32_controller_serial.write(line())
        self.microscope_esp32_controller_serial.write("\n")

    def onMessage2Changed(self, message):
        print('message2 changed', message)
        self.textBrowser.append(message)

    def camera_callback(self, draw_data):
        image = QtGui.QImage(draw_data, draw_data.shape[1], draw_data.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap.fromImage(image)
        self.label_2.setPixmap(pixmap)

class QApplication(QtWidgets.QApplication):
    def __init__(self, *args, **kwargs):
        super(QApplication, self).__init__(*args, **kwargs)

        self.main_window = MainWindow()
        self.main_window.show()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    app.exec_()

