from enum import Enum
import signal
import sys
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.uic import loadUi
from microscope_esp32_controller_serial import serial_interface_qobject as microscope_serial_qobject

# from video_sender.spin_widget import SpinWidget
# from video_sender.pyspin_camera import PySpinCamera
from video_sender.gige_camera import gige_camera_qobject



class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        loadUi("video_viewer.ui", self)
        
        self.g = gige_camera_qobject.GigECamera()
        self.g.imageChanged.connect(self.camera_callback)

        self.radioButton_3.toggled.connect(lambda value: self.groupBox_2.setEnabled(value))
        self.radioButton_23.toggled.connect(self.enableAuto)

        self.horizontalSlider.valueChanged.connect(self.AeTargetChanged)
        self.horizontalSlider_10.valueChanged.connect(self.ExposureChanged)

        self.checkBox_2.stateChanged.connect(self.VMirrorChanged)
        self.checkBox_3.stateChanged.connect(self.HMirrorChanged)

        self.g.begin()
        self.g.AeState = 1
        self.g.TriggerMode = 0
        self.g.camera_play()

    def HMirrorChanged(self, value):
        hmirror = value == QtCore.Qt.Checked
        print("hmirror changed", hmirror)
        self.g.HMirror = hmirror
    
    def VMirrorChanged(self, value):
        vmirror = value == QtCore.Qt.Checked
        print("vmirror changed", vmirror)
        self.g.VMirror = vmirror

    def enableAuto(self, value):
        self.groupBox_6.setEnabled(value)
        self.groupBox_5.setEnabled(not value)
        self.g.AeState = not value

    def AeTargetChanged(self, target):
        print("a")
        self.g.AeTarget = target

    def ExposureChanged(self, exposure):
        print("b", exposure)
        self.g.ExposureTime = exposure

    def camera_callback(self, draw_data):
        image = QtGui.QImage(draw_data, draw_data.shape[1], draw_data.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(image.scaled(1920/2,1080/2))
        self.label.setPixmap(pixmap)

class QApplication(QtWidgets.QApplication):
    def __init__(self, *args, **kwargs):
        super(QApplication, self).__init__(*args, **kwargs)

        self.main_window = MainWindow()
        self.main_window.show()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    app.exec_()

