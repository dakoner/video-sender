from enum import Enum
import signal
import sys
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.uic import loadUi
from microscope_esp32_controller_serial import serial_interface_qobject as microscope_serial_qobject

# from video_sender.spin_widget import SpinWidget
# from video_sender.pyspin_camera import PySpinCamera
from video_sender.gige_camera import gige_camera_qobject



class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        loadUi("video_viewer.ui", self)
        
        self.g = gige_camera_qobject.GigECamera()
        self.g.imageChanged.connect(self.camera_callback)

        self.radioButton_3.toggled.connect(lambda value: self.groupBox_2.setEnabled(value))
        self.radioButton_23.toggled.connect(self.enableAuto)

        self.AeTargetSlider.valueChanged.connect(self.AeTargetChanged)
        self.exposureTimeSlider.valueChanged.connect(self.ExposureTimeChanged)
        self.analogGainSlider.valueChanged.connect(self.AnalogGainChanged)
        self.sharpnessSlider.valueChanged.connect(self.SharpnessChanged)
        self.gammaSlider.valueChanged.connect(self.GammaChanged)
        self.contrastSlider.valueChanged.connect(self.ContrastChanged)

        self.checkBox_2.stateChanged.connect(self.VMirrorChanged)
        self.checkBox_3.stateChanged.connect(self.HMirrorChanged)

        self.g.begin()
        # self.g.AeState = 1
        # self.g.TriggerMode = 0
        # self.g.Gamma = 100
        # self.g.Contrast = 130
        # self.g.Sharpness = 0
        # self.g.AnalogGain = 1
        # self.g.HMirror = 0
        # self.g.VMirror = 0

        print(self.g.cap)
        self.exposureTimeSlider.setMinimum(self.g.cap.sExposeDesc.uiExposeTimeMin)
        self.exposureTimeSlider.setMaximum(self.g.cap.sExposeDesc.uiExposeTimeMax)
        self.exposureTimeSlider.setValue(self.g.ExposureTime)

        self.AeTargetSlider.setMinimum(self.g.cap.sExposeDesc.uiTargetMin)
        self.AeTargetSlider.setMaximum(self.g.cap.sExposeDesc.uiTargetMax)
        self.AeTargetSlider.setValue(self.g.AeTarget)

        
        self.analogGainSlider.setMinimum(self.g.cap.sExposeDesc.uiAnalogGainMin)
        self.analogGainSlider.setMaximum(self.g.cap.sExposeDesc.uiAnalogGainMax)
        self.analogGainSlider.setValue(self.g.AnalogGain)
    
        self.gammaSlider.setMinimum(self.g.cap.sGammaRange.iMin)
        self.gammaSlider.setMaximum(self.g.cap.sGammaRange.iMax)
        self.gammaSlider.setValue(self.g.Gamma)

        self.contrastSlider.setMinimum(self.g.cap.sContrastRange.iMin)
        self.contrastSlider.setMaximum(self.g.cap.sContrastRange.iMax)
        self.contrastSlider.setValue(self.g.Contrast)

        
        self.sharpnessSlider.setMinimum(self.g.cap.sSharpnessRange.iMin)
        self.sharpnessSlider.setMaximum(self.g.cap.sSharpnessRange.iMax)
        self.sharpnessSlider.setValue(self.g.Sharpness)


        self.g.camera_play()

    def GammaChanged(self, gamma):
        self.g.Gamma = gamma

    def ContrastChanged(self, contrast):
        self.g.Contrast = contrast

    def SharpnessChanged(self, sharpness):
        self.g.Sharpness = sharpness

    def AnalogGainChanged(self, analog_gain):
        self.g.AnalogGain = analog_gain

    def HMirrorChanged(self, value):
        hmirror = value == QtCore.Qt.Checked
        self.g.HMirror = hmirror
    
    def VMirrorChanged(self, value):
        vmirror = value == QtCore.Qt.Checked
        self.g.VMirror = vmirror

    def enableAuto(self, value):
        self.groupBox_6.setEnabled(value)
        self.groupBox_5.setEnabled(not value)
        self.g.AeState = not value

    def AeTargetChanged(self, target):
        self.g.AeTarget = target

    def ExposureTimeChanged(self, exposure):
        self.g.ExposureTime = exposure

    def camera_callback(self, draw_data):
        image = QtGui.QImage(draw_data, draw_data.shape[1], draw_data.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(image.scaled(1920/2,1080/2))
        self.label.setPixmap(pixmap)


# sExposeDesc:
# uiTargetMin:1
# uiTargetMax:255

# uiAnalogGainMin:1
# uiAnalogGainMax:8
# fAnalogGainStep:1.0


# sResolutionRange:
    # iHeightMax:1080
    # iHeightMin:0
    # iWidthMax:1920
    # iWidthMin:0

# uSkipModeMask:0
# uBinSumModeMask:0
# uBinAverageModeMask:0
# uResampleMask:0

# sRgbGainRange:
    # iRGainMin:0
    # iRGainMax:400
    # iGGainMin:0
    # iGGainMax:400
    # iBGainMin:0
    # iBGainMax:400

# sSaturationRange:
    # iMin:100
    # iMax:100

# sGammaRange:
    # iMin:0
    # iMax:250

# sContrastRange:
    # iMin:0
    # iMax:200

# sSharpnessRange:i
    # Min:0
    # iMax:100

# sIspCapacity:bMonoSensor:0

# bWbOnce:1
# bAutoWb:0
# bAutoExposure:1
# bManualExposure:1
# bAntiFlick:1
# bDeviceIsp:0
# bForceUseDeviceIsp:0
# bZoomHD:0
# play 0

class QApplication(QtWidgets.QApplication):
    def __init__(self, *args, **kwargs):
        super(QApplication, self).__init__(*args, **kwargs)

        self.main_window = MainWindow()
        self.main_window.show()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    app.exec_()

